#!/usr/bin/env python

# timed-os-stats
# Copyright 2012 Greg Smith gsmith@gregsmith.com
#
# Runs a command that produces regularly time output and adds time
# stamps for each line when appropriate. Currently just used to call dstat.

import os
import subprocess
import sys
import datetime
import time

class FlushFile(object):
    """Write-only flushing wrapper for file-type objects."""
    def __init__(self, f):
        self.f = f
    def write(self, x):
        self.f.write(x)
        self.f.flush()

# Replace stdout with an automatically flushing version
sys.stdout = FlushFile(sys.__stdout__)

def capture(cmd):
    try:
        # Attempt to call setsid() so that this Python process and its
        # children (shell and cmd) are in a new process group.
        # (On some platforms/shells, this Python process may already
        # be a process group leader, on some it will not be.)
        # We need to be in a new process group
        # because when it is time to kill this script we will want to kill
        # by process group ID from benchwarmer, and we don't wan't
        # benchwarmer to kill itself as well.
        os.setsid()
    except OSError:
        print >> sys.stderr, \
                 "Unable to setsid(). Already process group leader?"

    p = subprocess.Popen(cmd, shell = True,
                         stdout = subprocess.PIPE,
                         stderr = subprocess.STDOUT,
                         )

    pid = p.pid

    while True:
        line = p.stdout.readline()
        if line == '' and p.poll() != None:
            break

        sys.stdout.write(line)

    retcode = p.returncode

def usage():
    print >> sys.stderr, "Usage:  %s dstat" % sys.argv[0]
    print >> sys.stderr, "Supported platforms are linux"
    sys.exit(1)

if __name__=='__main__':
    if len(sys.argv)<2:
        usage()

    cmd=sys.argv[1]

    if sys.platform.startswith('linux'):
        if cmd=='dstat':
            capture("dstat -tcmsgy --disk-tps 10")
        else:
            usage()
    else:
        print >> sys.stderr, 'Unsupported platform', sys.platform
